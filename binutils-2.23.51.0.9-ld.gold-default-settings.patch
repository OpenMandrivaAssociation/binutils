--- binutils-2.24.51.0.1/gold/options.cc.gold_defaults~	2013-12-02 14:07:40.456512646 +0100
+++ binutils-2.24.51.0.1/gold/options.cc	2013-12-02 14:13:02.668484442 +0100
@@ -1242,6 +1242,22 @@ General_options::finalize()
     gold_fatal(_("Options --incremental-changed, --incremental-unchanged, "
 		 "--incremental-unknown require the use of --incremental"));
 
+  if (this->relocatable())
+    {
+      // Can't mix -r with --icf or --gc-sections. Given the latter 2 are
+      // just optimizations, let's let -r override them
+      if (this->gc_sections())
+        {
+          gold_warning(_("Disabling --gc-sections due to -r"));
+          this->set_gc_sections(false);
+        }
+      if (this->icf_enabled())
+        {
+          gold_warning(_("Disabling --icf due to -r"));
+          this->set_icf_status(ICF_NONE);
+        }
+    }
+
   // Check for options that are not compatible with incremental linking.
   // Where an option can be disabled without seriously changing the semantics
   // of the link, we turn the option off; otherwise, we issue a fatal error.
--- binutils-2.24.51.0.1/gold/options.h.gold_defaults~	2013-11-09 19:15:16.000000000 +0100
+++ binutils-2.24.51.0.1/gold/options.h	2013-12-02 14:11:51.972368265 +0100
@@ -645,7 +645,7 @@ class General_options
 	      N_("Allow unresolved references in shared libraries"),
 	      N_("Do not allow unresolved references in shared libraries"));
 
-  DEFINE_bool(as_needed, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(as_needed, options::TWO_DASHES, '\0', true,
 	      N_("Only set DT_NEEDED for shared libraries if used"),
 	      N_("Always DT_NEEDED for shared libraries"));
 
@@ -845,7 +845,7 @@ class General_options
 		N_("Min fraction of empty buckets in dynamic hash"),
 		N_("FRACTION"));
 
-  DEFINE_enum(hash_style, options::TWO_DASHES, '\0', "sysv",
+  DEFINE_enum(hash_style, options::TWO_DASHES, '\0', "gnu",
 	      N_("Dynamic hash style"), N_("[sysv,gnu,both]"),
 	      {"sysv", "gnu", "both"});
 
@@ -963,7 +963,7 @@ class General_options
   DEFINE_string(output, options::TWO_DASHES, 'o', "a.out",
 		N_("Set output file name"), N_("FILE"));
 
-  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 0,
+  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 1,
 	      N_("Optimize output file size"), N_("LEVEL"));
 
   DEFINE_string(oformat, options::EXACTLY_TWO_DASHES, '\0', "elf",
@@ -1104,7 +1104,7 @@ class General_options
   DEFINE_special(static, options::ONE_DASH, '\0',
 		 N_("Do not link against shared libraries"), NULL);
 
-  DEFINE_enum(icf, options::TWO_DASHES, '\0', "none",
+  DEFINE_enum(icf, options::TWO_DASHES, '\0', "safe",
 	      N_("Identical Code Folding. "
 		 "\'--icf=safe\' Folds ctors, dtors and functions whose"
 		 " pointers are definitely not taken."),
@@ -1189,14 +1189,14 @@ class General_options
   DEFINE_special(version_script, options::TWO_DASHES, '\0',
 		 N_("Read version script"), N_("FILE"));
 
-  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', true,
 	      N_("Warn about duplicate common symbols"),
 	      N_("Do not warn about duplicate common symbols (default)"));
 
   DEFINE_bool(warn_constructors, options::TWO_DASHES, '\0', false,
 	      N_("Ignored"), N_("Ignored"));
 
-  DEFINE_bool(warn_execstack, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(warn_execstack, options::TWO_DASHES, '\0', true,
 	      N_("Warn if the stack is executable"),
 	      N_("Do not warn if the stack is executable (default)"));
 
@@ -1210,9 +1210,9 @@ class General_options
 	      N_("Warn when skipping an incompatible library"),
 	      N_("Don't warn when skipping an incompatible library"));
 
-  DEFINE_bool(warn_shared_textrel, options::TWO_DASHES, '\0', false,
-	      N_("Warn if text segment is not shareable"),
-	      N_("Do not warn if text segment is not shareable (default)"));
+  DEFINE_bool(warn_shared_textrel, options::TWO_DASHES, '\0', true,
+	      N_("Warn if text segment is not shareable (default)"),
+	      N_("Do not warn if text segment is not shareable"));
 
   DEFINE_bool(warn_unresolved_symbols, options::TWO_DASHES, '\0', false,
 	      N_("Report unresolved symbols as warnings"),
@@ -1313,7 +1313,7 @@ class General_options
   DEFINE_bool(origin, options::DASH_Z, '\0', false,
 	      N_("Mark DSO to indicate that needs immediate $ORIGIN "
 		 "processing at runtime"), NULL);
-  DEFINE_bool(relro, options::DASH_Z, '\0', false,
+  DEFINE_bool(relro, options::DASH_Z, '\0', true,
 	      N_("Where possible mark variables read-only after relocation"),
 	      N_("Don't mark variables read-only after relocation"));
   DEFINE_bool(text, options::DASH_Z, '\0', false,
