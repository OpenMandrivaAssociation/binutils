diff -up binutils-2.34.90/gas/config/tc-i386.c.8~ binutils-2.34.90/gas/config/tc-i386.c
--- binutils-2.34.90/gas/config/tc-i386.c.8~	2020-07-16 04:28:47.000000000 +0200
+++ binutils-2.34.90/gas/config/tc-i386.c	2020-07-16 04:44:27.090903559 +0200
@@ -33,6 +33,15 @@
 #include "elf/x86-64.h"
 #include "opcodes/i386-init.h"
 
+#if defined(__linux__) && defined(__x86_64__)
+#include <sys/syscall.h>
+#include <sys/personality.h>
+
+#define is_linux32() ((syscall(SYS_personality, 0xffffffff) & PER_MASK) == PER_LINUX32)
+#else
+#define is_linux32() (0)
+#endif
+
 #ifdef HAVE_LIMITS_H
 #include <limits.h>
 #else
@@ -2647,7 +2656,7 @@ update_code_flag (int value, int check)
       else
 	as_error = as_bad;
       (*as_error) (_("64bit mode not supported on `%s'."),
-		   cpu_arch_name ? cpu_arch_name : default_arch);
+		   cpu_arch_name ? cpu_arch_name : (is_linux32 () ? "i386" : default_arch));
     }
   if (value == CODE_32BIT && !cpu_arch_flags.bitfield.cpui386)
     {
@@ -2656,7 +2665,7 @@ update_code_flag (int value, int check)
       else
 	as_error = as_bad;
       (*as_error) (_("32bit mode not supported on `%s'."),
-		   cpu_arch_name ? cpu_arch_name : default_arch);
+		   cpu_arch_name ? cpu_arch_name : (is_linux32 () ? "i386" : default_arch));
     }
   stackop_size = '\0';
 }
@@ -2784,7 +2793,7 @@ check_cpu_arch_compatible (const char *n
 	 use default_arch.  */
       arch = cpu_arch_name;
       if (!arch)
-	arch = default_arch;
+	arch = (is_linux32() ? "i386" : default_arch);
     }
 
   /* If we are targeting Intel MCU, we must enable it.  */
@@ -5277,7 +5286,7 @@ parse_insn (char *line, char *mnemonic)
   else
     as_bad (_("`%s' is not supported on `%s%s'"),
 	    current_templates->start->name,
-	    cpu_arch_name ? cpu_arch_name : default_arch,
+	    cpu_arch_name ? cpu_arch_name : ((is_linux32 () ? "i386" : default_arch)),
 	    cpu_sub_arch_name ? cpu_sub_arch_name : "");
 
   return NULL;
@@ -13529,7 +13538,7 @@ md_show_usage (FILE *stream)
 const char *
 i386_target_format (void)
 {
-  if (!strncmp (default_arch, "x86_64", 6))
+  if (!strncmp (default_arch, "x86_64", 6) && !is_linux32 ())
     {
       update_code_flag (CODE_64BIT, 1);
       if (default_arch[6] == '\0')
@@ -13537,7 +13546,7 @@ i386_target_format (void)
       else
 	x86_elf_abi = X86_64_X32_ABI;
     }
-  else if (!strcmp (default_arch, "i386"))
+  else if (!strcmp (default_arch, "i386") || is_linux32())
     update_code_flag (CODE_32BIT, 1);
   else if (!strcmp (default_arch, "iamcu"))
     {
