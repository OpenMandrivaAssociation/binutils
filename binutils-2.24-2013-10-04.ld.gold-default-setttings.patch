--- binutils-2.30/gold/options.cc.gold_defaults~	2018-01-13 14:31:16.000000000 +0100
+++ binutils-2.30/gold/options.cc	2018-01-29 00:18:37.328630654 +0100
@@ -1328,6 +1328,22 @@ General_options::finalize()
     gold_fatal(_("Options --incremental-changed, --incremental-unchanged, "
 		 "--incremental-unknown require the use of --incremental"));
 
+  if (this->relocatable())
+    {
+      // Can't mix -r with --icf or --gc-sections. Given the latter 2 are
+      // just optimizations, let's let -r override them
+      if (this->gc_sections())
+        {
+          gold_warning(_("Disabling --gc-sections due to -r"));
+          this->set_gc_sections(false);
+        }
+      if (this->icf_enabled())
+        {
+          gold_warning(_("Disabling --icf due to -r"));
+          this->set_icf_status(ICF_NONE);
+        }
+    }
+
   // Check for options that are not compatible with incremental linking.
   // Where an option can be disabled without seriously changing the semantics
   // of the link, we turn the option off; otherwise, we issue a fatal error.
--- binutils-2.30/gold/options.h.gold_defaults~	2018-01-19 11:15:20.000000000 +0100
+++ binutils-2.30/gold/options.h	2018-01-29 00:18:37.329630656 +0100
@@ -694,7 +694,7 @@ class General_options
 	      N_("(aarch64 only) Do not apply link-time values "
 		 "for dynamic relocations"));
 
-  DEFINE_bool(as_needed, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(as_needed, options::TWO_DASHES, '\0', true,
 	      N_("Use DT_NEEDED only for shared libraries that are used"),
 	      N_("Use DT_NEEDED for all shared libraries"));
 
@@ -934,7 +934,7 @@ class General_options
   DEFINE_bool_alias(i, relocatable, options::EXACTLY_ONE_DASH, '\0',
 		    N_("Alias for -r"), NULL, false);
 
-  DEFINE_enum(icf, options::TWO_DASHES, '\0', "none",
+  DEFINE_enum(icf, options::TWO_DASHES, '\0', "safe",
 	      N_("Identical Code Folding. "
 		 "\'--icf=safe\' Folds ctors, dtors and functions whose"
 		 " pointers are definitely not taken"),
@@ -1073,7 +1073,7 @@ class General_options
   DEFINE_string(oformat, options::EXACTLY_TWO_DASHES, '\0', "elf",
 		N_("Set output format"), N_("[binary]"));
 
-  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 0,
+  DEFINE_uint(optimize, options::EXACTLY_ONE_DASH, 'O', 1,
 	      N_("Optimize output file size"), N_("LEVEL"));
 
   DEFINE_enum(orphan_handling, options::TWO_DASHES, '\0', "place",
@@ -1348,14 +1348,14 @@ class General_options
 
   // w
 
-  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(warn_common, options::TWO_DASHES, '\0', true,
 	      N_("Warn about duplicate common symbols"),
 	      N_("Do not warn about duplicate common symbols"));
 
   DEFINE_bool_ignore(warn_constructors, options::TWO_DASHES, '\0',
 		     N_("Ignored"), N_("Ignored"));
 
-  DEFINE_bool(warn_execstack, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(warn_execstack, options::TWO_DASHES, '\0', true,
 	      N_("Warn if the stack is executable"),
 	      N_("Do not warn if the stack is executable"));
 
@@ -1369,7 +1369,7 @@ class General_options
 	      N_("Warn when skipping an incompatible library"),
 	      N_("Don't warn when skipping an incompatible library"));
 
-  DEFINE_bool(warn_shared_textrel, options::TWO_DASHES, '\0', false,
+  DEFINE_bool(warn_shared_textrel, options::TWO_DASHES, '\0', true,
 	      N_("Warn if text segment is not shareable"),
 	      N_("Do not warn if text segment is not shareable"));
 
