--- binutils-2.22.52.0.4/gas/config/tc-i386.c.linux32~	2012-06-05 18:44:10.000000000 +0200
+++ binutils-2.22.52.0.4/gas/config/tc-i386.c	2012-06-07 16:17:52.040447605 +0200
@@ -36,6 +36,15 @@
 #include "elf/x86-64.h"
 #include "opcodes/i386-init.h"
 
+#if defined(__linux__) && defined(__x86_64__)
+#include <sys/syscall.h>
+#include <sys/personality.h>
+
+#define is_linux32() ((syscall(SYS_personality, 0xffffffff) & PER_MASK) == PER_LINUX32)
+#else
+#define is_linux32() (0)
+#endif
+
 #ifndef REGISTER_WARNINGS
 #define REGISTER_WARNINGS 1
 #endif
@@ -2013,7 +2022,7 @@ update_code_flag (int value, int check)
       else
 	as_error = as_bad;
       (*as_error) (_("64bit mode not supported on `%s'."),
-		   cpu_arch_name ? cpu_arch_name : default_arch);
+		   cpu_arch_name ? cpu_arch_name : (is_linux32 () ? "i386" : default_arch));
     }
   if (value == CODE_32BIT && !cpu_arch_flags.bitfield.cpui386)
     {
@@ -2022,7 +2031,7 @@ update_code_flag (int value, int check)
       else
 	as_error = as_bad;
       (*as_error) (_("32bit mode not supported on `%s'."),
-		   cpu_arch_name ? cpu_arch_name : default_arch);
+		   cpu_arch_name ? cpu_arch_name : (is_linux32 () ? "i386" : default_arch));
     }
   stackop_size = '\0';
 }
@@ -2136,7 +2145,7 @@ check_cpu_arch_compatible (const char *n
 	 use default_arch.  */
       arch = cpu_arch_name;
       if (!arch)
-	arch = default_arch;
+	arch = (is_linux32 () ? "i386" : default_arch);
     }
 
   /* If we are targeting Intel L1OM, we must enable it.  */
@@ -3516,7 +3525,7 @@ check_suffix:
     {
       as_bad (_("`%s' is not supported on `%s%s'"),
 	      current_templates->start->name,
-	      cpu_arch_name ? cpu_arch_name : default_arch,
+	      cpu_arch_name ? cpu_arch_name : ((is_linux32 () ? "i386" : default_arch)),
 	      cpu_sub_arch_name ? cpu_sub_arch_name : "");
       return NULL;
     }
@@ -8806,7 +8815,7 @@ md_show_usage (FILE *stream)
 const char *
 i386_target_format (void)
 {
-  if (!strncmp (default_arch, "x86_64", 6))
+  if (!strncmp (default_arch, "x86_64", 6) && !is_linux32 ())
     {
       update_code_flag (CODE_64BIT, 1);
       if (default_arch[6] == '\0')
@@ -8814,7 +8823,7 @@ i386_target_format (void)
       else
 	x86_elf_abi = X86_64_X32_ABI;
     }
-  else if (!strcmp (default_arch, "i386"))
+  else if (!strcmp (default_arch, "i386") || is_linux32 ())
     update_code_flag (CODE_32BIT, 1);
   else
     as_fatal (_("unknown architecture"));
--- binutils-2.22.52.0.4/gas/config/tc-ppc.c.linux32~	2012-06-05 18:44:10.000000000 +0200
+++ binutils-2.22.52.0.4/gas/config/tc-ppc.c	2012-06-07 16:23:14.868449175 +0200
@@ -41,6 +41,10 @@
 #include "libxcoff.h"
 #endif
 
+#if defined(__linux__) && defined(__powerpc64__)
+#include <sys/utsname.h>
+#endif
+
 /* This is the assembler for the PowerPC or POWER (RS/6000) chips.  */
 
 /* Tell the main code what the endianness is.  */
@@ -119,6 +123,8 @@ static bfd_boolean reg_names_p = TARGET_
 static void ppc_macro (char *, const struct powerpc_macro *);
 static void ppc_byte (int);
 
+static void ppc_set_obj64 PARAMS ((int));
+
 #if defined (OBJ_XCOFF) || defined (OBJ_ELF)
 static void ppc_tc (int);
 static void ppc_machine (int);
@@ -946,7 +952,7 @@ ppc_parse_name (const char *name, expres
 /* Local variables.  */
 
 /* Whether to target xcoff64/elf64.  */
-static unsigned int ppc_obj64 = BFD_DEFAULT_TARGET_SIZE == 64;
+static int g_ppc_obj64 = -1;
 
 /* Opcode hash table.  */
 static struct hash_control *ppc_hash;
@@ -1172,7 +1178,7 @@ md_parse_option (int c, char *arg)
       if (strcmp (arg, "64") == 0)
 	{
 #ifdef BFD64
-	  ppc_obj64 = 1;
+	  ppc_set_obj64(1);
 	  if (ppc_cpu & PPC_OPCODE_VLE)
 	    as_bad (_("the use of -mvle requires -a32."));
 #else
@@ -1180,7 +1186,7 @@ md_parse_option (int c, char *arg)
 #endif
 	}
       else if (strcmp (arg, "32") == 0)
-	ppc_obj64 = 0;
+	ppc_set_obj64(0);
       else
 	return 0;
       break;
@@ -1363,6 +1369,37 @@ PowerPC options:\n\
 -nops=count             when aligning, more than COUNT nops uses a branch\n"));
 }
 
+/* Set ppc_obj64 if it is not already set.  */
+
+#define ppc_obj64 (ppc_get_obj64 ())
+
+static unsigned int
+ppc_get_obj64 (void)
+{
+  if (g_ppc_obj64 < 0)
+    {
+      g_ppc_obj64 = BFD_DEFAULT_TARGET_SIZE == 64;
+
+#if defined(__linux__) && defined(__powerpc64__)
+      /* Determine if we are running under a 32-bit personality. Don't
+	 use plain personality(0xffffffff) syscall because the kernel lies.  */
+      {
+	struct utsname buf;
+	if (uname(&buf) == 0 && strcmp(buf.machine, "ppc") == 0)
+	  g_ppc_obj64 = 0;
+      }
+#endif
+    }
+
+  return g_ppc_obj64;
+}
+
+static void
+ppc_set_obj64 (int obj64)
+{
+  g_ppc_obj64 = obj64;
+}
+
 /* Set ppc_cpu if it is not already set.  */
 
 static void
